hooks 함수

react에서 화면이 랜더링되는 조건
react -> state(상태) 구독 ->state가 변화하면 -> 가상돔 <-- 실제돔(랜더링)

라이프사이클
react가 예전에는 class였음.
[페이지가 열렸을 때]...[페이지가 닫혔을 때 까지]

이 사이에 일어나는 이벤트나 값등을 관리

class사라진 이유 :
class는 다양한 기능을 지원하지만, 숙련된 React 개발자라고 할지라도
기계와 사용자를 혼동시키기 때문에 class를 활용한 react는 완벽히 이해하기 힘들다.

==> 지금의 함수형 컴포넌트 등장 ==> hooks함수

1.useState
2.useRef
3.useMemo
4.useCallback
5.useEffect
  주된 함수들은 이 5가지들.

1.useState
   -react의 상태관리 함수
   -state의 생성 및 갱신이 가능
   -값이 바뀌면 화면을 리랜더

   useState는 변수를 react의 state로 관리하는 함수
    [변수명, 바꿀 수 있는 순수 함수]
    state값을 바꿀 수 있는건 두번째 오는 함수 뿐!

  useState는  컴포넌트 자체를 랜더링 시킴
       따라서 랜더링 기준을 컴포넌트 나누기
       ex) 랜더링 최적화
        
       a컴포넌트가 랜더링될때 b컴포넌트는 랜더링될필요가 없으면
       서로 분리해놔야함.


2.useRef
   -ref 객체 내부 값은 render와 상관없이 유지
   -html 요소에 접근하기 위해서 사용
    쓰는 이유: react에서 dom api를 사용하는 것을 지양.
    화면이 랜더링되어도 변수값이 그대로 유지시키고 싶을때 사용

3.useMemo
   - 연산된 결과 값을 반환하여 캐싱하고 (저장)
    화면이 랜더링 되어도 연산 과정을 거치지 않고 
    해당 값을 재사용 할 수 있도록 해주는 함수

    시간복잡도가 높은 함수들을 다룰때 사용.


4.useCallback
    - 특정 함수를 새로 만들지 않고 (선언 x) 캐싱하고
    화면이 랜더링 되었을 때 재사용할 수 있도록 해주는 함수들은
    
    얘도 useMemo와 마찬가지로 시간복잡도를 생각해야함.

    백엔드랑 데이터 주고받을 때 사용.

    -메모이제이션(메모아이제이션)
     캐싱, 저장
     리액트에서는 어떤 함수가 선언되거나 연산되는 결과가 오래 걸린다면
     이 함수는 랜더링 될 때 마다 재선언 및 재연산을 할 필요가 있는가?

     ex) 값이 바귀지 않는 연산, 그러면 그 연산을 매번 해줄 필요가 있는가?
     재연산 하지 않고 값만 저장했다가 사용하면 됨


5.useEffect 

   마운트/언마운트
   (페이지 실행할 경우)/(페이가 닫혔을 경우)

   의존성 배열(memo,useCallback)
   해당 배열 내부의 요소가 값이 바뀐다면 재실행.

   요즘은 선호하지 않는 추세. useMemo를 더 선호.

ex)a state 변화 -> 의존성 배열인 b도 변화